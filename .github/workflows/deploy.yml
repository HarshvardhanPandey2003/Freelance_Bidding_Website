name: GitOps Build and Deploy

on:
  push:
    branches: [main, prod]
  workflow_dispatch:

env:
  RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP || 'hvp-aks' }}
  CLUSTER_NAME: ${{ vars.CLUSTER_NAME || 'freelance-aks' }}
  KEY_VAULT_NAME: ${{ vars.KEY_VAULT_NAME || 'freelance-app-kv-2025' }}

jobs:
  build-and-gitops-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

    - name: Get AKS credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CLUSTER_NAME }} \
          --overwrite-existing

    # BUILD PHASE (Standard GitOps)
    - name: Build and Push Backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ vars.DOCKERHUB_USERNAME }}/freelance-backend:${{ github.sha }}

    - name: Build and Push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ vars.DOCKERHUB_USERNAME }}/freelance-frontend:${{ github.sha }}

    # GET AZURE IDENTITY (For Key Vault)
    - name: Get Azure Identity Information
      id: get-identity
      run: |
        echo "🔍 Retrieving Azure identity information..."
        
        NODE_RG=$(az aks show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CLUSTER_NAME }} \
          --query nodeResourceGroup -o tsv)
        TENANT_ID=$(az account show --query tenantId -o tsv)
        
        SECRETS_PROVIDER_CLIENT_ID=$(az identity list \
          --resource-group $NODE_RG \
          --query "[?contains(name, 'azurekeyvaultsecretsprovider')].clientId" \
          -o tsv)
        
        echo "tenant-id=$TENANT_ID" >> $GITHUB_OUTPUT
        echo "client-id=$SECRETS_PROVIDER_CLIENT_ID" >> $GITHUB_OUTPUT

    # UPDATE MANIFESTS (GitOps Part)
    - name: Update Kubernetes Manifests
      run: |
        echo "🔄 Updating manifests for GitOps..."
        
        # Update image tags
        sed -i "s|image: .*/freelance-backend:.*|image: ${{ vars.DOCKERHUB_USERNAME }}/freelance-backend:${{ github.sha }}|" k8s-manifests/deployments/backend.yaml
        sed -i "s|image: .*/freelance-frontend:.*|image: ${{ vars.DOCKERHUB_USERNAME }}/freelance-frontend:${{ github.sha }}|" k8s-manifests/deployments/frontend.yaml
        
        # Update Azure Key Vault identity
        sed -i "s/userAssignedIdentityID: .*/userAssignedIdentityID: \"${{ steps.get-identity.outputs.client-id }}\"/" k8s-manifests/secrets/secret-provider.yaml
        sed -i "s/tenantId: .*/tenantId: \"${{ steps.get-identity.outputs.tenant-id }}\"/" k8s-manifests/secrets/secret-provider.yaml

    # COMMIT TO TRIGGER ARGOCD
    - name: Commit Manifest Changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add k8s-manifests/
        
        if git diff --staged --quiet; then
          echo "📝 No manifest changes to commit"
        else
          git commit -m "🚀 GitOps: Update images to ${{ github.sha }}"
          git push
          echo "✅ Manifests committed - ArgoCD will sync!"
        fi

    # WAIT FOR ARGOCD TO DEPLOY
    - name: Wait for ArgoCD Sync
      run: |
        echo "⏳ Waiting for ArgoCD to sync and deploy..."
        echo "This usually takes 1-3 minutes..."
        
        # Wait a bit for ArgoCD to pick up changes
        sleep 120
        
        # Check if basic deployments are ready
        kubectl wait --for=condition=available deployment/redis --timeout=300s || echo "⚠️ Redis still starting"
        kubectl wait --for=condition=available deployment/backend --timeout=300s || echo "⚠️ Backend still starting"
        kubectl wait --for=condition=available deployment/frontend --timeout=300s || echo "⚠️ Frontend still starting"

    # THE DYNAMIC PARTS (Post-GitOps)
    - name: Get LoadBalancer IP and Update ConfigMap
      id: get-ip
      run: |
        echo "🌐 Getting LoadBalancer IP for dynamic configuration..."
        
        # Wait for LoadBalancer IP
        FRONTEND_IP=""
        for i in {1..18}; do
          FRONTEND_IP=$(kubectl get ingress app-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          
          if [[ $FRONTEND_IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "✅ LoadBalancer IP: $FRONTEND_IP"
            break
          fi
          
          echo "⏳ Waiting for LoadBalancer IP... ($i/18)"
          sleep 10
        done
        
        if [[ ! $FRONTEND_IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ Could not get LoadBalancer IP"
          exit 1
        fi
        
        # Set outputs
        echo "frontend-ip=$FRONTEND_IP" >> $GITHUB_OUTPUT
        echo "frontend-url=http://$FRONTEND_IP" >> $GITHUB_OUTPUT
        echo "api-url=http://$FRONTEND_IP/api" >> $GITHUB_OUTPUT
        
        # Update ConfigMap with dynamic IP (This is the non-GitOps part)
        echo "🔄 Updating ConfigMap with LoadBalancer IP..."
        kubectl patch configmap app-config --patch-data '{"data":{"FRONTEND_URL":"http://'$FRONTEND_IP'"}}'
        
        echo "✅ ConfigMap updated with frontend URL"

    # RESTART DEPLOYMENTS TO PICK UP NEW CONFIG
    - name: Restart Deployments
      run: |
        echo "🔄 Restarting deployments to pick up new configuration..."
        
        kubectl rollout restart deployment/frontend
        kubectl rollout restart deployment/backend
        
        echo "⏳ Waiting for rollouts..."
        kubectl rollout status deployment/frontend --timeout=180s
        kubectl rollout status deployment/backend --timeout=180s
        
        echo "✅ Deployments restarted!"

    # FINAL STATUS
    - name: Deployment Complete
      run: |
        echo "🎉 === GITOPS DEPLOYMENT COMPLETED ==="
        echo ""
        echo "📱 Application URLs:"
        echo "  • Frontend: ${{ steps.get-ip.outputs.frontend-url }}"
        echo "  • Backend API: ${{ steps.get-ip.outputs.api-url }}"
        echo ""
        echo "🔧 ArgoCD Application: freelance-app"
        echo "🌐 LoadBalancer IP: ${{ steps.get-ip.outputs.frontend-ip }}"
        echo ""
        echo "🎯 GitOps Status: Static manifests managed by ArgoCD"
        echo "🔄 Dynamic Config: LoadBalancer IP updated via CI/CD"
        
        echo "::notice title=🚀 GitOps Deploy Success::App live at ${{ steps.get-ip.outputs.frontend-url }}"
