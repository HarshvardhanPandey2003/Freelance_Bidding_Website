name: GitOps Manifest Validation

on:
  pull_request:
    branches: [main, prod]
    paths: ['k8s-manifests/**', '.github/workflows/validate-manifests.yml']
  push:
    branches: [main, prod]
    paths: ['k8s-manifests/**']

jobs:
  validate-manifests:
    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v4

    # # Test 1: YAML Syntax Validation
    # - name: üîç YAML Lint Check
    #   run: |
    #     echo "Checking YAML syntax with yamllint..."
    #     pip install yamllint
    #     yamllint -d "{extends: default, rules: {document-start: disable}}" k8s-manifests
    #     echo "‚úÖ YAML lint passed!"

    # Test 2: Kubernetes Schema Validation
    # - name: üõ°Ô∏è Kubernetes Schema Validation
    #   uses: azure/setup-kubectl@v3
      
    # - name: Validate K8s Manifests
    #   run: |
    #     echo "Validating Kubernetes manifests..."
    #     kubectl apply --dry-run=client --validate=true -f k8s-manifests/deployments/ || exit 1
    #     kubectl apply --dry-run=client --validate=true -f k8s-manifests/configmaps/ || exit 1
    #     kubectl apply --dry-run=client --validate=true -f k8s-manifests/ingress/ || exit 1
    #     kubectl apply --dry-run=client --validate=true -f k8s-manifests/secrets/ || exit 1
    #     kubectl apply --dry-run=client --validate=true -f k8s-manifests/autoscaling/ || exit 1
        # echo "‚úÖ All manifests are valid!"

    # Test 3: Resource Requirements Check
    - name: üîß Resource Requirements Check
      run: |
        echo "Checking resource requirements..."
        
        # Check if deployments have resource limits
        for file in k8s-manifests/deployments/*.yaml; do
          echo "Checking resource limits in: $file"
          
          if ! grep -q "resources:" "$file"; then
            echo "‚ùå Missing resource limits in $file"
            exit 1
          fi
          
          if ! grep -q "limits:" "$file"; then
            echo "‚ùå Missing resource limits in $file"
            exit 1
          fi
          
          if ! grep -q "requests:" "$file"; then
            echo "‚ùå Missing resource requests in $file" 
            exit 1
          fi
        done
        echo "‚úÖ All deployments have resource limits!"

    # Test 4: Service-Deployment Matching
    # This extarcts the app labels from the deployments and checks if the services match them
    - name: üîó Service-Deployment Matching
      run: |
        echo "Checking service-deployment matching..."
        
        # Extract app labels from deployments
        BACKEND_LABEL=$(grep -A 10 "selector:" k8s-manifests/deployments/backend.yaml | grep "app:" | awk '{print $2}')
        FRONTEND_LABEL=$(grep -A 10 "selector:" k8s-manifests/deployments/frontend.yaml | grep "app:" | awk '{print $2}')
        REDIS_LABEL=$(grep -A 10 "selector:" k8s-manifests/deployments/redis.yaml | grep "app:" | awk '{print $2}')  # Added for Redis
        
        # Check if services match (update paths if services are separate)
        if ! grep -q "app: $BACKEND_LABEL" k8s-manifests/services/backend-service.yaml; then  # Change to actual service file
          echo "‚ùå Backend service selector doesn't match deployment"
          exit 1
        fi
        
        if ! grep -q "app: $FRONTEND_LABEL" k8s-manifests/services/frontend-service.yaml; then
          echo "‚ùå Frontend service selector doesn't match deployment"
          exit 1
        fi
        
        if ! grep -q "app: $REDIS_LABEL" k8s-manifests/deployments/redis.yaml; then  # For combined file like Redis
          echo "‚ùå Redis service selector doesn't match deployment"
          exit 1
        fi
        
        echo "‚úÖ Services match deployments!"

    # Test 5: Secret Reference Validation
    - name: üîê Secret Reference Check
      run: |
        echo "Checking secret references..."
        
        # Check if referenced secrets exist in secret provider
        REQUIRED_SECRETS=("MONGODB_URI" "JWT_SECRET" "RAZORPAY_KEY_ID" "RAZORPAY_KEY_SECRET" "VITE_RAZORPAY_KEY")
        
        for secret in "${REQUIRED_SECRETS[@]}"; do
          if ! grep -q "$secret" k8s-manifests/secrets/secret-provider.yaml; then
            echo "‚ùå Secret $secret not found in secret provider"
            exit 1
          fi
        done
        
        echo "‚úÖ All required secrets are configured!"

    # Test 6: Ingress Path Validation
    - name: üåê Ingress Configuration Check
      run: |
        echo "Checking ingress configuration..."
        
        # Check required paths exist
        if ! grep -q "/api" k8s-manifests/ingress/ingress.yaml; then
          echo "‚ùå API path missing in ingress"
          exit 1
        fi
        
        if ! grep -q "/socket.io" k8s-manifests/ingress/ingress.yaml; then
          echo "‚ùå Socket.IO path missing in ingress"
          exit 1
        fi
        
        if ! grep -q "backend-service" k8s-manifests/ingress/ingress.yaml; then
          echo "‚ùå Backend service not referenced in ingress"
          exit 1
        fi
        
        if ! grep -q "frontend-service" k8s-manifests/ingress/ingress.yaml; then
          echo "‚ùå Frontend service not referenced in ingress"
          exit 1
        fi
        
        echo "‚úÖ Ingress configuration is valid!"

    # Test 7: HPA Target Validation
    - name: üìä HPA Configuration Check
      run: |
        echo "Checking HPA configuration..."
        
        # Check if HPA targets exist
        if ! grep -q "name: frontend" k8s-manifests/autoscaling/hpa-combined.yaml; then
          echo "‚ùå Frontend HPA target missing"
          exit 1
        fi
        
        if ! grep -q "name: backend" k8s-manifests/autoscaling/hpa-combined.yaml; then
          echo "‚ùå Backend HPA target missing"
          exit 1
        fi
        
        echo "‚úÖ HPA configuration is valid!"

    - name: ‚úÖ All Tests Passed
      run: |
        echo "üéâ All GitOps validation tests passed!"
        echo "Your manifests are ready for deployment!"
